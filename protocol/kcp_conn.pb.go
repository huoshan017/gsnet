// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kcp_conn.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KcpSendSyn struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KcpSendSyn) Reset()         { *m = KcpSendSyn{} }
func (m *KcpSendSyn) String() string { return proto.CompactTextString(m) }
func (*KcpSendSyn) ProtoMessage()    {}
func (*KcpSendSyn) Descriptor() ([]byte, []int) {
	return fileDescriptor_078b82bf60e113b8, []int{0}
}
func (m *KcpSendSyn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KcpSendSyn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KcpSendSyn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KcpSendSyn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KcpSendSyn.Merge(m, src)
}
func (m *KcpSendSyn) XXX_Size() int {
	return m.Size()
}
func (m *KcpSendSyn) XXX_DiscardUnknown() {
	xxx_messageInfo_KcpSendSyn.DiscardUnknown(m)
}

var xxx_messageInfo_KcpSendSyn proto.InternalMessageInfo

type KcpSendSynAck struct {
	Conversation         uint32   `protobuf:"varint,1,opt,name=Conversation,proto3" json:"Conversation,omitempty"`
	Token                int64    `protobuf:"varint,2,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KcpSendSynAck) Reset()         { *m = KcpSendSynAck{} }
func (m *KcpSendSynAck) String() string { return proto.CompactTextString(m) }
func (*KcpSendSynAck) ProtoMessage()    {}
func (*KcpSendSynAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_078b82bf60e113b8, []int{1}
}
func (m *KcpSendSynAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KcpSendSynAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KcpSendSynAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KcpSendSynAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KcpSendSynAck.Merge(m, src)
}
func (m *KcpSendSynAck) XXX_Size() int {
	return m.Size()
}
func (m *KcpSendSynAck) XXX_DiscardUnknown() {
	xxx_messageInfo_KcpSendSynAck.DiscardUnknown(m)
}

var xxx_messageInfo_KcpSendSynAck proto.InternalMessageInfo

func (m *KcpSendSynAck) GetConversation() uint32 {
	if m != nil {
		return m.Conversation
	}
	return 0
}

func (m *KcpSendSynAck) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

type KcpSendAck struct {
	Conversation         uint32   `protobuf:"varint,1,opt,name=Conversation,proto3" json:"Conversation,omitempty"`
	Token                int64    `protobuf:"varint,2,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KcpSendAck) Reset()         { *m = KcpSendAck{} }
func (m *KcpSendAck) String() string { return proto.CompactTextString(m) }
func (*KcpSendAck) ProtoMessage()    {}
func (*KcpSendAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_078b82bf60e113b8, []int{2}
}
func (m *KcpSendAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KcpSendAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KcpSendAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KcpSendAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KcpSendAck.Merge(m, src)
}
func (m *KcpSendAck) XXX_Size() int {
	return m.Size()
}
func (m *KcpSendAck) XXX_DiscardUnknown() {
	xxx_messageInfo_KcpSendAck.DiscardUnknown(m)
}

var xxx_messageInfo_KcpSendAck proto.InternalMessageInfo

func (m *KcpSendAck) GetConversation() uint32 {
	if m != nil {
		return m.Conversation
	}
	return 0
}

func (m *KcpSendAck) GetToken() int64 {
	if m != nil {
		return m.Token
	}
	return 0
}

func init() {
	proto.RegisterType((*KcpSendSyn)(nil), "protocol.KcpSendSyn")
	proto.RegisterType((*KcpSendSynAck)(nil), "protocol.KcpSendSynAck")
	proto.RegisterType((*KcpSendAck)(nil), "protocol.KcpSendAck")
}

func init() { proto.RegisterFile("kcp_conn.proto", fileDescriptor_078b82bf60e113b8) }

var fileDescriptor_078b82bf60e113b8 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4e, 0x2e, 0x88,
	0x4f, 0xce, 0xcf, 0xcb, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9,
	0x39, 0x4a, 0x3c, 0x5c, 0x5c, 0xde, 0xc9, 0x05, 0xc1, 0xa9, 0x79, 0x29, 0xc1, 0x95, 0x79, 0x4a,
	0x9e, 0x5c, 0xbc, 0x08, 0x9e, 0x63, 0x72, 0xb6, 0x90, 0x12, 0x17, 0x8f, 0x73, 0x7e, 0x5e, 0x59,
	0x6a, 0x51, 0x71, 0x62, 0x49, 0x66, 0x7e, 0x9e, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x8a,
	0x98, 0x90, 0x08, 0x17, 0x6b, 0x48, 0x7e, 0x76, 0x6a, 0x9e, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x73,
	0x10, 0x84, 0xa3, 0xe4, 0x06, 0x37, 0x98, 0x22, 0x73, 0x9c, 0x64, 0x4f, 0x3c, 0x92, 0x63, 0xbc,
	0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0xb8, 0xf5, 0xf4,
	0xf4, 0x61, 0xee, 0x4f, 0x62, 0x03, 0xb3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x3c,
	0x59, 0xac, 0xe2, 0x00, 0x00, 0x00,
}

func (m *KcpSendSyn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KcpSendSyn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KcpSendSyn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *KcpSendSynAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KcpSendSynAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KcpSendSynAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Token != 0 {
		i = encodeVarintKcpConn(dAtA, i, uint64(m.Token))
		i--
		dAtA[i] = 0x10
	}
	if m.Conversation != 0 {
		i = encodeVarintKcpConn(dAtA, i, uint64(m.Conversation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KcpSendAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KcpSendAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KcpSendAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Token != 0 {
		i = encodeVarintKcpConn(dAtA, i, uint64(m.Token))
		i--
		dAtA[i] = 0x10
	}
	if m.Conversation != 0 {
		i = encodeVarintKcpConn(dAtA, i, uint64(m.Conversation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKcpConn(dAtA []byte, offset int, v uint64) int {
	offset -= sovKcpConn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KcpSendSyn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KcpSendSynAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != 0 {
		n += 1 + sovKcpConn(uint64(m.Conversation))
	}
	if m.Token != 0 {
		n += 1 + sovKcpConn(uint64(m.Token))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KcpSendAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != 0 {
		n += 1 + sovKcpConn(uint64(m.Conversation))
	}
	if m.Token != 0 {
		n += 1 + sovKcpConn(uint64(m.Token))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovKcpConn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKcpConn(x uint64) (n int) {
	return sovKcpConn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KcpSendSyn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKcpConn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KcpSendSyn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KcpSendSyn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKcpConn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKcpConn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KcpSendSynAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKcpConn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KcpSendSynAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KcpSendSynAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			m.Conversation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKcpConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Conversation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKcpConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKcpConn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKcpConn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KcpSendAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKcpConn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KcpSendAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KcpSendAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			m.Conversation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKcpConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Conversation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKcpConn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKcpConn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKcpConn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKcpConn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKcpConn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKcpConn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKcpConn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKcpConn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKcpConn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKcpConn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKcpConn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKcpConn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKcpConn = fmt.Errorf("proto: unexpected end of group")
)
