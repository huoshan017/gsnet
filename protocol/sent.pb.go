// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sent.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SentAck struct {
	RecvCount            int32    `protobuf:"varint,1,opt,name=RecvCount,proto3" json:"RecvCount,omitempty"`
	RecvTotalNum         int32    `protobuf:"varint,2,opt,name=RecvTotalNum,proto3" json:"RecvTotalNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentAck) Reset()         { *m = SentAck{} }
func (m *SentAck) String() string { return proto.CompactTextString(m) }
func (*SentAck) ProtoMessage()    {}
func (*SentAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_d014c18f74997430, []int{0}
}
func (m *SentAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SentAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SentAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentAck.Merge(m, src)
}
func (m *SentAck) XXX_Size() int {
	return m.Size()
}
func (m *SentAck) XXX_DiscardUnknown() {
	xxx_messageInfo_SentAck.DiscardUnknown(m)
}

var xxx_messageInfo_SentAck proto.InternalMessageInfo

func (m *SentAck) GetRecvCount() int32 {
	if m != nil {
		return m.RecvCount
	}
	return 0
}

func (m *SentAck) GetRecvTotalNum() int32 {
	if m != nil {
		return m.RecvTotalNum
	}
	return 0
}

func init() {
	proto.RegisterType((*SentAck)(nil), "protocol.SentAck")
}

func init() { proto.RegisterFile("sent.proto", fileDescriptor_d014c18f74997430) }

var fileDescriptor_d014c18f74997430 = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4e, 0xcd, 0x2b,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x4a, 0xde, 0x5c,
	0xec, 0xc1, 0xa9, 0x79, 0x25, 0x8e, 0xc9, 0xd9, 0x42, 0x32, 0x5c, 0x9c, 0x41, 0xa9, 0xc9, 0x65,
	0xce, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x08, 0x01, 0x21, 0x25,
	0x2e, 0x1e, 0x10, 0x27, 0x24, 0xbf, 0x24, 0x31, 0xc7, 0xaf, 0x34, 0x57, 0x82, 0x09, 0xac, 0x00,
	0x45, 0xcc, 0x49, 0xf6, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63,
	0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x5b, 0x4f, 0x4f, 0x1f, 0x66, 0x57, 0x12, 0x1b, 0x98, 0x65,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xea, 0x2a, 0xf6, 0x07, 0x8a, 0x00, 0x00, 0x00,
}

func (m *SentAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecvTotalNum != 0 {
		i = encodeVarintSent(dAtA, i, uint64(m.RecvTotalNum))
		i--
		dAtA[i] = 0x10
	}
	if m.RecvCount != 0 {
		i = encodeVarintSent(dAtA, i, uint64(m.RecvCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSent(dAtA []byte, offset int, v uint64) int {
	offset -= sovSent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SentAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecvCount != 0 {
		n += 1 + sovSent(uint64(m.RecvCount))
	}
	if m.RecvTotalNum != 0 {
		n += 1 + sovSent(uint64(m.RecvTotalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSent(x uint64) (n int) {
	return sovSent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SentAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvCount", wireType)
			}
			m.RecvCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTotalNum", wireType)
			}
			m.RecvTotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvTotalNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSent = fmt.Errorf("proto: unexpected end of group")
)
